package gestionDeRecetas;

import java.util.ArrayList;
import java.util.Scanner;

public class Receta {
	
	String nombre;
	ArrayList<Ingrediente> ingredientes;
	ArrayList<Receta> recetasContenidas;
	int tiempoDeCoccion;
	String modoDePreparacion;
	String tipoDeReceta;
	String complejidad;
	double precioReceta;
	
	
	public Receta(String nombre, ArrayList<Ingrediente> ingredientes, int tiempoDeCoccion, String modoDePreparacion,
			String tipoDeReceta, String complejidad, double precioReceta) {
		
		this.nombre = nombre;
		this.ingredientes = ingredientes;//Consultar sobre como se deberian agregar los ingredientes
		this.recetasContenidas = siDependeReceta();
		this.tiempoDeCoccion = tiempoDeCoccion;
		this.modoDePreparacion = modoDePreparacion;
		this.tipoDeReceta = tipoDeReceta;
		this.complejidad = complejidad;
		this.precioReceta = precioReceta;
	}
	
	////////////////////////////////////////////////
	
	//Getters y Setters
	
	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public ArrayList<Ingrediente> getIngredientes() {
		return ingredientes;
	}

	public void setIngredientes(ArrayList<Ingrediente> ingredientes) {
		this.ingredientes = ingredientes;
	}

	public ArrayList<Receta> getRecetasContenidas() {
		return recetasContenidas;
	}

	public void setRecetasContenidas(ArrayList<Receta> recetasContenidas) {
		this.recetasContenidas = recetasContenidas;
	}

	public int getTiempoDeCoccion() {
		return tiempoDeCoccion;
	}

	public void setTiempoDeCoccion(int tiempoDeCoccion) {
		this.tiempoDeCoccion = tiempoDeCoccion;
	}

	public String getModoDePreparacion() {
		return modoDePreparacion;
	}

	public void setModoDePreparacion(String modoDePreparacion) {
		this.modoDePreparacion = modoDePreparacion;
	}

	public String getTipoDeReceta() {
		return tipoDeReceta;
	}

	public void setTipoDeReceta(String tipoDeReceta) {
		this.tipoDeReceta = tipoDeReceta;
	}

	public String getComplejidad() {
		return complejidad;
	}

	public void setComplejidad(String complejidad) {
		this.complejidad = complejidad;
	}

	public double getPrecioReceta() {
		return precioReceta;
	}

	public void setPrecioReceta(double precioReceta) {
		this.precioReceta = precioReceta;
	}
	

		
	/////////////////////////////////////////////////////////////////////////

	//Va agregando las recetas en caso de que esta receta dependa de otras

	public ArrayList<Receta> siDependeReceta() {
		Scanner entrada = new Scanner(System.in);
		ArrayList<Receta> listaAuxiliar = new ArrayList<Receta>();
		boolean condicion = (Helper.validarEnteroEnRango(entrada, "La receta depende de otras recetas? \n 1-Si \n 2-No", 1, 2) != 1);
		
		while(condicion) {
			//Muestra las recetas para poder elegir
			mostrarRecetasPorNombre();
			
			//Se ingresa el nombre de la receta para luego buscarlo en el array mediante un metodo
			String nombreReceta = Helper.validarStringNoVacio(entrada, "Que receta desea agregar a esta receta?");
			Receta aux = buscarRecetaPorNombre(nombreReceta);
			
			if(aux.nombre.equalsIgnoreCase(nombreReceta)) {
				listaAuxiliar.add(aux);
			}else {
				System.out.println("Nombre de la receta invalido");
			}
			
			condicion = Helper.validarEnteroEnRango(entrada, "Desea continuar? \n 1-Si \n 2-No", 1, 2) == 1;
		}
		return listaAuxiliar;
		
	}
	
	
	
	public Receta buscarRecetaPorNombre(String nombreReceta) {
		
		for(Receta receta:recetasContenidas) {
			
			if(receta.nombre.equalsIgnoreCase(nombreReceta)) {
				return receta;
			}
		}
		return null;
	}
	
	//Metodo para buscar una receta por su nombre y verificar que si este
	public boolean verificarRecetaPorNombre(String nombreReceta) {
		
		
		for(Receta receta:recetasContenidas) {
			
			if(receta.nombre.equalsIgnoreCase(nombreReceta)) {
				return true;
			}
		}
		return false;
	}
	
	//Metodo para mostrar las recetas contenidas
	public void mostrarRecetasPorNombre(){
		for(Receta receta:recetasContenidas) {
			System.out.println(receta.nombre);
		}
	}
	
	///////////////////////////////////////////////////
	
	//Modifica la receta en caso de que el usuario lo quiera
	public Receta modificarReceta(Receta recetaAModificar, int opcion) {
		Scanner entrada = new Scanner(System.in);
		
		switch(opcion) {
		case 1:
			//Falta agregar la modificacion de los ingredientes
			break;
			
		case 2:
			System.out.println("El tiempo de coccion actual es de :"+ recetaAModificar.getTiempoDeCoccion() +" min");
			recetaAModificar.setTiempoDeCoccion(Helper.validarEntero(entrada, "Ingrese el nuevo tiempo de coccion"));
			break;
			
		case 3:
			System.out.println("El tipo actual es :"+ recetaAModificar.getModoDePreparacion());
			recetaAModificar.setModoDePreparacion(Helper.validarStringNoVacio(entrada, "Ingrese el nuevo modo de preparacion"));
			break;	
		
		case 4:
			System.out.println("La complejidad actual es :"+ recetaAModificar.getTipoDeReceta());
			int nuevaTipo = Helper.validarEnteroEnRango(entrada, "Ingrese el nuevo tipo \n 1-Horno \n 2-Ensalada \n 3-Gurmet \n 4-Postres", 1, 4);
			//Se guarda el nuevo tipo ingresado en un auxiliar para poder usar la sintaxis corta del switch
			String auxiliarTipo = switch(nuevaTipo) {
								case 1 -> "Horno";
								case 2 -> "Ensalada";
								case 3 -> "Gurmet";
								case 4 -> "Postre";
								default -> throw new IllegalArgumentException("Valor no valido: " + nuevaTipo);
			};
			recetaAModificar.setComplejidad(auxiliarTipo);
			break;
		
		case 5:
			System.out.println("La complejidad actual es :"+ recetaAModificar.getComplejidad());
			int nuevaComplejidad = Helper.validarEnteroEnRango(entrada, "Ingrese la nueva complejidad \n 1-Alta \n 2-Media \n 3-Baja", 1, 3);
			//Se guarda la nueva complejidad ingresada en un auxiliar para poder usar la sintaxis corta del switch
			String auxiliarComplejidad = switch(nuevaComplejidad) {
								case 1 -> "Alta";
								case 2 -> "Media";
								case 3 -> "Baja";
								default -> throw new IllegalArgumentException("Valor no valido: " + nuevaComplejidad);
			};
			recetaAModificar.setComplejidad(auxiliarComplejidad);
			break;
		}
		
		return recetaAModificar;
	}
	
	//////////////////////////////////////////////////
	
	//Calcula el precio total de los ingredientes que contiene la receta
	public double calcularPrecioIngredientes(ArrayList<Ingrediente> ingredientesRecetaActual) {
		double auxiliar = 0;
		if(!ingredientesRecetaActual.isEmpty()) {
			for(int i = 0; i < ingredientesRecetaActual.size();i++) {
				auxiliar += ingredientesRecetaActual.get(i).getPrecio();
			}
		}else {
			System.out.println("La lista de ingredientes esta vacia");
		}
		
		return auxiliar;
	}
	
	public double calcularPrecioCaracteristicas(String complejidadActual, String tipoDeRecetaActual) {
		
		double auxiliar = 0;
		auxiliar += switch(complejidadActual.toLowerCase()) {
		case "alta" -> 2000;
		case "media" -> 1000;
		case "baja" -> 500;
		default -> throw new IllegalArgumentException("Valor no valido: " + complejidadActual);
		};
		
		auxiliar += switch(tipoDeRecetaActual.toLowerCase()) {
		case "horno" -> 2000;
		case "gurmet" -> 2500;
		case "ensalada" -> 1000;
		case "postre" -> 1500;
		default -> throw new IllegalArgumentException("Valor no valido: " + recetaActual.getTipoDeReceta());
		};
		
		return auxiliar;
	}
	
		
	//Calcula el precio de la receta, teniendo en cuenta que esta receta puede contener otras
	public double calcularPrecioReceta() {
		double auxiliar = 0;
		if(!this.recetasContenidas.isEmpty()) {
			for(int i = 0; i < this.recetasContenidas.size();i++) {
				auxiliar += calcularPrecioIngredientes(recetasContenidas.get(i).getIngredientes());
				auxiliar += calcularPrecioCaracteristicas(this.recetasContenidas.get(i));
			}
			
		}else{
			System.out.println("Esta receta no contiene otras recetas, solo se sumara el precio de los ingredientes de esta receta");
			auxiliar += calcularPrecioIngredientes(this.ingredientes);
			auxiliar += calcularPrecioCaracteristicas(this.);
		}
		return auxiliar;
	}
		
	
}
